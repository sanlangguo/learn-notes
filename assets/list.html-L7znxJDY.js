const l=JSON.parse('{"key":"v-610ebdb2","path":"/v8/list.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"01-V8是如何执行一段JavaScript代码的？","slug":"_01-v8是如何执行一段javascript代码的","link":"#_01-v8是如何执行一段javascript代码的","children":[{"level":3,"title":"V8的虚拟机","slug":"v8的虚拟机","link":"#v8的虚拟机","children":[]},{"level":3,"title":"关键概念","slug":"关键概念","link":"#关键概念","children":[]},{"level":3,"title":"JIT","slug":"jit","link":"#jit","children":[]},{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"词法环境","slug":"词法环境","link":"#词法环境","children":[]},{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"V8的执行流程","slug":"v8的执行流程","link":"#v8的执行流程","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"02-函数即对象：一篇文章彻底搞懂JavaScript的函数特点","slug":"_02-函数即对象-一篇文章彻底搞懂javascript的函数特点","link":"#_02-函数即对象-一篇文章彻底搞懂javascript的函数特点","children":[{"level":3,"title":"函数是一等公民","slug":"函数是一等公民","link":"#函数是一等公民","children":[]},{"level":3,"title":"对象和面向对象","slug":"对象和面向对象","link":"#对象和面向对象","children":[]},{"level":3,"title":"函数的特点","slug":"函数的特点","link":"#函数的特点","children":[]},{"level":3,"title":"闭包的实现","slug":"闭包的实现","link":"#闭包的实现","children":[]},{"level":3,"title":"加速JavaScript代码执行","slug":"加速javascript代码执行","link":"#加速javascript代码执行","children":[]},{"level":3,"title":"JIT编译","slug":"jit编译","link":"#jit编译","children":[]},{"level":3,"title":"隐藏类","slug":"隐藏类","link":"#隐藏类","children":[]},{"level":3,"title":"V8引擎","slug":"v8引擎","link":"#v8引擎","children":[]}]},{"level":2,"title":"03-快属性和慢属性：V8是怎样提升对象属性访问速度的","slug":"_03-快属性和慢属性-v8是怎样提升对象属性访问速度的","link":"#_03-快属性和慢属性-v8是怎样提升对象属性访问速度的","children":[{"level":3,"title":"常规属性和排序属性","slug":"常规属性和排序属性","link":"#常规属性和排序属性","children":[]},{"level":3,"title":"快属性和慢属性","slug":"快属性和慢属性","link":"#快属性和慢属性","children":[]},{"level":3,"title":"隐藏类","slug":"隐藏类-1","link":"#隐藏类-1","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"04-函数表达式：涉及大量概念，函数表达式到底该怎么学","slug":"_04-函数表达式-涉及大量概念-函数表达式到底该怎么学","link":"#_04-函数表达式-涉及大量概念-函数表达式到底该怎么学","children":[{"level":3,"title":"函数表达式的学习难度","slug":"函数表达式的学习难度","link":"#函数表达式的学习难度","children":[]},{"level":3,"title":"函数声明与函数表达式的差异","slug":"函数声明与函数表达式的差异","link":"#函数声明与函数表达式的差异","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"05-原型链：V8是如何实现对象继承的","slug":"_05-原型链-v8是如何实现对象继承的","link":"#_05-原型链-v8是如何实现对象继承的","children":[{"level":3,"title":"基于类的继承","slug":"基于类的继承","link":"#基于类的继承","children":[]},{"level":3,"title":"基于原型的继承","slug":"基于原型的继承","link":"#基于原型的继承","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"06-作用域链：V8是如何查找变量的","slug":"_06-作用域链-v8是如何查找变量的","link":"#_06-作用域链-v8是如何查找变量的","children":[]}]},{"level":2,"title":"07-类型转换：V8是怎么实现1-“2”的","slug":"_07-类型转换-v8是怎么实现1-2-的","link":"#_07-类型转换-v8是怎么实现1-2-的","children":[{"level":3,"title":"问题引入","slug":"问题引入","link":"#问题引入","children":[]},{"level":3,"title":"类型系统","slug":"类型系统","link":"#类型系统","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"问题解答","slug":"问题解答","link":"#问题解答","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]},{"level":2,"title":"08-如何构建和使用V8的调试工具d8","slug":"_08-如何构建和使用v8的调试工具d8","link":"#_08-如何构建和使用v8的调试工具d8","children":[{"level":3,"title":"构建d8","slug":"构建d8","link":"#构建d8","children":[]},{"level":3,"title":"使用d8","slug":"使用d8","link":"#使用d8","children":[]},{"level":3,"title":"运行d8命令，进入d8的交互式环境；","slug":"运行d8命令-进入d8的交互式环境","link":"#运行d8命令-进入d8的交互式环境","children":[]},{"level":3,"title":"总结","slug":"总结-4","link":"#总结-4","children":[]}]},{"level":2,"title":"09-运行时环境：运行JavaScript代码的基石","slug":"_09-运行时环境-运行javascript代码的基石","link":"#_09-运行时环境-运行javascript代码的基石","children":[{"level":3,"title":"运行时环境","slug":"运行时环境","link":"#运行时环境","children":[]},{"level":3,"title":"宿主环境","slug":"宿主环境","link":"#宿主环境","children":[]}]},{"level":2,"title":"10-机器代码：二进制机器码究竟是如何被CPU执行的","slug":"_10-机器代码-二进制机器码究竟是如何被cpu执行的","link":"#_10-机器代码-二进制机器码究竟是如何被cpu执行的","children":[{"level":3,"title":"机器码的执行过程","slug":"机器码的执行过程","link":"#机器码的执行过程","children":[]},{"level":3,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]}]},{"level":2,"title":"11-堆和栈：函数调用是如何影响到内存布局的","slug":"_11-堆和栈-函数调用是如何影响到内存布局的","link":"#_11-堆和栈-函数调用是如何影响到内存布局的","children":[{"level":3,"title":"栈结构管理函数调用","slug":"栈结构管理函数调用","link":"#栈结构管理函数调用","children":[]},{"level":3,"title":"总结","slug":"总结-6","link":"#总结-6","children":[]}]},{"level":2,"title":"12-延迟解析：V8是如何实现闭包的","slug":"_12-延迟解析-v8是如何实现闭包的","link":"#_12-延迟解析-v8是如何实现闭包的","children":[{"level":3,"title":"V8引擎的编译和执行阶段","slug":"v8引擎的编译和执行阶段","link":"#v8引擎的编译和执行阶段","children":[]},{"level":3,"title":"惰性解析的原因","slug":"惰性解析的原因","link":"#惰性解析的原因","children":[]},{"level":3,"title":"惰性解析的过程","slug":"惰性解析的过程","link":"#惰性解析的过程","children":[]},{"level":3,"title":"惰性解析支持闭包","slug":"惰性解析支持闭包","link":"#惰性解析支持闭包","children":[]},{"level":3,"title":"总结","slug":"总结-7","link":"#总结-7","children":[]}]},{"level":2,"title":"13-字节码（一）：V8为什么又重新引入字节码","slug":"_13-字节码-一-v8为什么又重新引入字节码","link":"#_13-字节码-一-v8为什么又重新引入字节码","children":[{"level":3,"title":"早期V8引擎的执行流程","slug":"早期v8引擎的执行流程","link":"#早期v8引擎的执行流程","children":[]},{"level":3,"title":"字节码的作用","slug":"字节码的作用","link":"#字节码的作用","children":[]},{"level":3,"title":"解释器可以直接解释执行字节码。","slug":"解释器可以直接解释执行字节码。","link":"#解释器可以直接解释执行字节码。","children":[]},{"level":3,"title":"总结","slug":"总结-8","link":"#总结-8","children":[]}]},{"level":2,"title":"14-字节码（二）：解释器是如何解释执行字节码的","slug":"_14-字节码-二-解释器是如何解释执行字节码的","link":"#_14-字节码-二-解释器是如何解释执行字节码的","children":[{"level":3,"title":"生成字节码","slug":"生成字节码","link":"#生成字节码","children":[]},{"level":3,"title":"字节码的优势","slug":"字节码的优势","link":"#字节码的优势","children":[]},{"level":3,"title":"总结","slug":"总结-9","link":"#总结-9","children":[]}]},{"level":2,"title":"15-隐藏类：如何在内存中快速查找对象属性","slug":"_15-隐藏类-如何在内存中快速查找对象属性","link":"#_15-隐藏类-如何在内存中快速查找对象属性","children":[{"level":3,"title":"为什么静态语言的效率更高？","slug":"为什么静态语言的效率更高","link":"#为什么静态语言的效率更高","children":[]},{"level":3,"title":"隐藏类","slug":"隐藏类-2","link":"#隐藏类-2","children":[]},{"level":3,"title":"隐藏类的生成和转换","slug":"隐藏类的生成和转换","link":"#隐藏类的生成和转换","children":[]},{"level":3,"title":"隐藏类的应用","slug":"隐藏类的应用","link":"#隐藏类的应用","children":[]},{"level":3,"title":"总结","slug":"总结-10","link":"#总结-10","children":[]}]},{"level":2,"title":"16-V8是怎么通过内联缓存来提升函数执行效率的","slug":"_16-v8是怎么通过内联缓存来提升函数执行效率的","link":"#_16-v8是怎么通过内联缓存来提升函数执行效率的","children":[{"level":3,"title":"什么是内联缓存？","slug":"什么是内联缓存","link":"#什么是内联缓存","children":[]},{"level":3,"title":"内联缓存的优化策略","slug":"内联缓存的优化策略","link":"#内联缓存的优化策略","children":[]},{"level":3,"title":"基于类型的内联缓存","slug":"基于类型的内联缓存","link":"#基于类型的内联缓存","children":[]},{"level":3,"title":"基于形状的内联缓存","slug":"基于形状的内联缓存","link":"#基于形状的内联缓存","children":[]},{"level":3,"title":"基于 Map 的内联缓存","slug":"基于-map-的内联缓存","link":"#基于-map-的内联缓存","children":[]},{"level":3,"title":"总结","slug":"总结-11","link":"#总结-11","children":[]}]},{"level":2,"title":"17-消息队列：V8是怎么实现回调函数的","slug":"_17-消息队列-v8是怎么实现回调函数的","link":"#_17-消息队列-v8是怎么实现回调函数的","children":[{"level":3,"title":"什么是回调函数？","slug":"什么是回调函数","link":"#什么是回调函数","children":[]},{"level":3,"title":"V8如何实现回调函数？","slug":"v8如何实现回调函数","link":"#v8如何实现回调函数","children":[]},{"level":3,"title":"总结","slug":"总结-12","link":"#总结-12","children":[]}]},{"level":2,"title":"18-异步编程（一）：V8是如何实现微任务的","slug":"_18-异步编程-一-v8是如何实现微任务的","link":"#_18-异步编程-一-v8是如何实现微任务的","children":[{"level":3,"title":"V8 如何实现微任务？","slug":"v8-如何实现微任务","link":"#v8-如何实现微任务","children":[]},{"level":3,"title":"微任务的优势","slug":"微任务的优势","link":"#微任务的优势","children":[]},{"level":3,"title":"知识点","slug":"知识点","link":"#知识点","children":[]}]},{"level":2,"title":"19-异步编程（二）：V8是如何实现async-await的","slug":"_19-异步编程-二-v8是如何实现async-await的","link":"#_19-异步编程-二-v8是如何实现async-await的","children":[{"level":3,"title":"JavaScript 异步编程和回调地狱问题","slug":"javascript-异步编程和回调地狱问题","link":"#javascript-异步编程和回调地狱问题","children":[]},{"level":3,"title":"解决回调地狱问题的方案","slug":"解决回调地狱问题的方案","link":"#解决回调地狱问题的方案","children":[]},{"level":3,"title":"sync/await","slug":"sync-await","link":"#sync-await","children":[]},{"level":3,"title":"V8 引擎如何实现 Async/await","slug":"v8-引擎如何实现-async-await","link":"#v8-引擎如何实现-async-await","children":[]}]},{"level":2,"title":"20-垃圾回收（一）：V8的两个垃圾回收器是如何工作的","slug":"_20-垃圾回收-一-v8的两个垃圾回收器是如何工作的","link":"#_20-垃圾回收-一-v8的两个垃圾回收器是如何工作的","children":[{"level":3,"title":"垃圾回收机制","slug":"垃圾回收机制","link":"#垃圾回收机制","children":[]},{"level":3,"title":"V8 引擎中的两个垃圾回收器","slug":"v8-引擎中的两个垃圾回收器","link":"#v8-引擎中的两个垃圾回收器","children":[]},{"level":3,"title":"新生代垃圾回收器（Scavenge）","slug":"新生代垃圾回收器-scavenge","link":"#新生代垃圾回收器-scavenge","children":[]},{"level":3,"title":"老生代垃圾回收器（Mark-Sweep & Mark-Compact）","slug":"老生代垃圾回收器-mark-sweep-mark-compact","link":"#老生代垃圾回收器-mark-sweep-mark-compact","children":[]},{"level":3,"title":"总结","slug":"总结-13","link":"#总结-13","children":[]}]},{"level":2,"title":"21-垃圾回收（二）：V8是如何优化垃圾回收器执行效率的","slug":"_21-垃圾回收-二-v8是如何优化垃圾回收器执行效率的","link":"#_21-垃圾回收-二-v8是如何优化垃圾回收器执行效率的","children":[{"level":3,"title":"全停顿","slug":"全停顿","link":"#全停顿","children":[]},{"level":3,"title":"优化","slug":"优化","link":"#优化","children":[]},{"level":3,"title":"并行","slug":"并行","link":"#并行","children":[]},{"level":3,"title":"并发","slug":"并发","link":"#并发","children":[]},{"level":3,"title":"增量","slug":"增量","link":"#增量","children":[]},{"level":3,"title":"总结","slug":"总结-14","link":"#总结-14","children":[]}]},{"level":2,"title":"22-几种常见内存问题的解决策略","slug":"_22-几种常见内存问题的解决策略","link":"#_22-几种常见内存问题的解决策略","children":[{"level":3,"title":"Node 中的 readFile API 工作机制","slug":"node-中的-readfile-api-工作机制","link":"#node-中的-readfile-api-工作机制","children":[]},{"level":3,"title":"JavaScript 中的几种常见内存问题","slug":"javascript-中的几种常见内存问题","link":"#javascript-中的几种常见内存问题","children":[]},{"level":3,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":3,"title":"过度使用内存","slug":"过度使用内存","link":"#过度使用内存","children":[]},{"level":3,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[]},{"level":3,"title":"总结","slug":"总结-15","link":"#总结-15","children":[]}]},{"level":2,"title":"23-前端学习踩坑史","slug":"_23-前端学习踩坑史","link":"#_23-前端学习踩坑史","children":[]}],"git":{"updatedTime":1702107949000,"contributors":[{"name":"sanlangguo","email":"SanLangGuo@outlook.com","commits":1},{"name":"三郎过","email":"SanLangGuo@outlook.com","commits":1}]},"filePathRelative":"v8/list.md"}');export{l as data};
