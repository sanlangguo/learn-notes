const l=JSON.parse(`{"key":"v-28e8c20a","path":"/browser/list.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"01-Chrome架构：仅仅打开了1个页面，为什么有4个进程？","slug":"_01-chrome架构-仅仅打开了1个页面-为什么有4个进程","link":"#_01-chrome架构-仅仅打开了1个页面-为什么有4个进程","children":[{"level":3,"title":"选择Chrome浏览器作为例子","slug":"选择chrome浏览器作为例子","link":"#选择chrome浏览器作为例子","children":[]},{"level":3,"title":"进程和线程的关系","slug":"进程和线程的关系","link":"#进程和线程的关系","children":[]},{"level":3,"title":"并行处理的概念","slug":"并行处理的概念","link":"#并行处理的概念","children":[]},{"level":3,"title":"单进程浏览器的问题","slug":"单进程浏览器的问题","link":"#单进程浏览器的问题","children":[]},{"level":3,"title":"多进程架构的解决方案","slug":"多进程架构的解决方案","link":"#多进程架构的解决方案","children":[]},{"level":3,"title":"多进程架构的优势和挑战","slug":"多进程架构的优势和挑战","link":"#多进程架构的优势和挑战","children":[]},{"level":3,"title":"面向服务的架构过渡","slug":"面向服务的架构过渡","link":"#面向服务的架构过渡","children":[]},{"level":3,"title":"Chrome基础服务的构建","slug":"chrome基础服务的构建","link":"#chrome基础服务的构建","children":[]}]},{"level":2,"title":"02-TCP协议：如何保证页面文件能被完整送达浏览器？","slug":"_02-tcp协议-如何保证页面文件能被完整送达浏览器","link":"#_02-tcp协议-如何保证页面文件能被完整送达浏览器","children":[{"level":3,"title":"TCP协议：如何保证页面文件能被完整送达浏览器？","slug":"tcp协议-如何保证页面文件能被完整送达浏览器","link":"#tcp协议-如何保证页面文件能被完整送达浏览器","children":[]}]},{"level":2,"title":"03-HTTP请求流程：为什么很多站点第二次打开速度会很快？","slug":"_03-http请求流程-为什么很多站点第二次打开速度会很快","link":"#_03-http请求流程-为什么很多站点第二次打开速度会很快","children":[]},{"level":2,"title":"04-导航流程：从输入URL到页面展示，这中间发生了什么？","slug":"_04-导航流程-从输入url到页面展示-这中间发生了什么","link":"#_04-导航流程-从输入url到页面展示-这中间发生了什么","children":[{"level":3,"title":"用户输入URL请求，浏览器进程接收到后将该URL转发给网络进程。","slug":"用户输入url请求-浏览器进程接收到后将该url转发给网络进程。","link":"#用户输入url请求-浏览器进程接收到后将该url转发给网络进程。","children":[]}]},{"level":2,"title":"05-渲染流程（上）：HTML、CSS和JavaScript，是如何变成页面的？","slug":"_05-渲染流程-上-html、css和javascript-是如何变成页面的","link":"#_05-渲染流程-上-html、css和javascript-是如何变成页面的","children":[{"level":3,"title":"渲染流程","slug":"渲染流程","link":"#渲染流程","children":[]},{"level":3,"title":"HTML、CSS和JavaScript的关系","slug":"html、css和javascript的关系","link":"#html、css和javascript的关系","children":[]}]},{"level":2,"title":"06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？","slug":"_06-渲染流程-下-html、css和javascript-是如何变成页面的","link":"#_06-渲染流程-下-html、css和javascript-是如何变成页面的","children":[{"level":3,"title":"分层","slug":"分层","link":"#分层","children":[]},{"level":3,"title":"图层绘制","slug":"图层绘制","link":"#图层绘制","children":[]},{"level":3,"title":"栅格化","slug":"栅格化","link":"#栅格化","children":[]},{"level":3,"title":"合成","slug":"合成","link":"#合成","children":[]},{"level":3,"title":"一个完整的渲染流程大致可总结为如下：","slug":"一个完整的渲染流程大致可总结为如下","link":"#一个完整的渲染流程大致可总结为如下","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"07-变量提升：JavaScript代码是按顺序执行的吗？","slug":"_07-变量提升-javascript代码是按顺序执行的吗","link":"#_07-变量提升-javascript代码是按顺序执行的吗","children":[{"level":3,"title":"JavaScript 代码的顺序执行","slug":"javascript-代码的顺序执行","link":"#javascript-代码的顺序执行","children":[]},{"level":3,"title":"变量提升的实例","slug":"变量提升的实例","link":"#变量提升的实例","children":[]},{"level":3,"title":"变量提升的注意事项","slug":"变量提升的注意事项","link":"#变量提升的注意事项","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"08-调用栈：为什么JavaScript代码会出现栈溢出？","slug":"_08-调用栈-为什么javascript代码会出现栈溢出","link":"#_08-调用栈-为什么javascript代码会出现栈溢出","children":[{"level":3,"title":"执行上下文的创建","slug":"执行上下文的创建","link":"#执行上下文的创建","children":[]},{"level":3,"title":"调用栈的作用","slug":"调用栈的作用","link":"#调用栈的作用","children":[]},{"level":3,"title":"栈溢出错误","slug":"栈溢出错误","link":"#栈溢出错误","children":[]},{"level":3,"title":"函数调用和栈结构","slug":"函数调用和栈结构","link":"#函数调用和栈结构","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]}]},{"level":2,"title":"09-块级作用域：var缺陷以及为什么要引入let和const？","slug":"_09-块级作用域-var缺陷以及为什么要引入let和const","link":"#_09-块级作用域-var缺陷以及为什么要引入let和const","children":[{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":3,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[]},{"level":3,"title":"var 缺陷","slug":"var-缺陷","link":"#var-缺陷","children":[]},{"level":3,"title":"let 和 const","slug":"let-和-const","link":"#let-和-const","children":[]}]},{"level":2,"title":"10-作用域链和闭包：代码中出现相同的变量，JavaScript 引擎是如何选择的？","slug":"_10-作用域链和闭包-代码中出现相同的变量-javascript-引擎是如何选择的","link":"#_10-作用域链和闭包-代码中出现相同的变量-javascript-引擎是如何选择的","children":[{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"作用域链查找","slug":"作用域链查找","link":"#作用域链查找","children":[]},{"level":3,"title":"闭包实现","slug":"闭包实现","link":"#闭包实现","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]},{"level":2,"title":"11-this：从JavaScript执行上下文的视角讲清楚this","slug":"_11-this-从javascript执行上下文的视角讲清楚this","link":"#_11-this-从javascript执行上下文的视角讲清楚this","children":[{"level":3,"title":"JavaScript 中的 this 是什么","slug":"javascript-中的-this-是什么","link":"#javascript-中的-this-是什么","children":[]},{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"this 的使用方法","slug":"this-的使用方法","link":"#this-的使用方法","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"总结","slug":"总结-4","link":"#总结-4","children":[]}]},{"level":2,"title":"12-栈空间和堆空间：数据是如何存储的？","slug":"_12-栈空间和堆空间-数据是如何存储的","link":"#_12-栈空间和堆空间-数据是如何存储的","children":[{"level":3,"title":"JavaScript 的内存机制","slug":"javascript-的内存机制","link":"#javascript-的内存机制","children":[]},{"level":3,"title":"栈空间和堆空间","slug":"栈空间和堆空间","link":"#栈空间和堆空间","children":[]},{"level":3,"title":"JavaScript 是一种动态类型语言","slug":"javascript-是一种动态类型语言","link":"#javascript-是一种动态类型语言","children":[]},{"level":3,"title":"数据在内存中的存储方式","slug":"数据在内存中的存储方式","link":"#数据在内存中的存储方式","children":[]},{"level":3,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]}]},{"level":2,"title":"13-垃圾回收：垃圾数据是如何自动回收的？","slug":"_13-垃圾回收-垃圾数据是如何自动回收的","link":"#_13-垃圾回收-垃圾数据是如何自动回收的","children":[{"level":3,"title":"手动回收策略","slug":"手动回收策略","link":"#手动回收策略","children":[]},{"level":3,"title":"自动回收策略","slug":"自动回收策略","link":"#自动回收策略","children":[]},{"level":3,"title":"JavaScript 的垃圾回收机制","slug":"javascript-的垃圾回收机制","link":"#javascript-的垃圾回收机制","children":[]},{"level":3,"title":"引用计数算法","slug":"引用计数算法","link":"#引用计数算法","children":[]},{"level":3,"title":"标记清除算法","slug":"标记清除算法","link":"#标记清除算法","children":[]},{"level":3,"title":"总结","slug":"总结-6","link":"#总结-6","children":[]}]},{"level":2,"title":"14-编译器和解释器：V8是如何执行一段JavaScript代码的？","slug":"_14-编译器和解释器-v8是如何执行一段javascript代码的","link":"#_14-编译器和解释器-v8是如何执行一段javascript代码的","children":[{"level":3,"title":"编译器和解释器","slug":"编译器和解释器","link":"#编译器和解释器","children":[]},{"level":3,"title":"V8 执行机制","slug":"v8-执行机制","link":"#v8-执行机制","children":[]}]},{"level":2,"title":"15-消息队列和事件循环：页面是怎么“活”起来的？","slug":"_15-消息队列和事件循环-页面是怎么-活-起来的","link":"#_15-消息队列和事件循环-页面是怎么-活-起来的","children":[]},{"level":2,"title":"WebAPI：setTimeout是如何实现的？","slug":"webapi-settimeout是如何实现的","link":"#webapi-settimeout是如何实现的","children":[{"level":3,"title":"setTimeout 的基本使用方法","slug":"settimeout-的基本使用方法","link":"#settimeout-的基本使用方法","children":[]},{"level":3,"title":"浏览器如何实现 setTimeout","slug":"浏览器如何实现-settimeout","link":"#浏览器如何实现-settimeout","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-1","link":"#注意事项-1","children":[]},{"level":3,"title":"总结","slug":"总结-7","link":"#总结-7","children":[]}]},{"level":2,"title":"WebAPI：XMLHttpRequest是怎么实现的？","slug":"webapi-xmlhttprequest是怎么实现的","link":"#webapi-xmlhttprequest是怎么实现的","children":[]},{"level":2,"title":"18-宏任务和微任务：不是所有任务都是一个待遇","slug":"_18-宏任务和微任务-不是所有任务都是一个待遇","link":"#_18-宏任务和微任务-不是所有任务都是一个待遇","children":[{"level":3,"title":"浏览器的消息循环系统","slug":"浏览器的消息循环系统","link":"#浏览器的消息循环系统","children":[]},{"level":3,"title":"宏任务","slug":"宏任务","link":"#宏任务","children":[]},{"level":3,"title":"微任务","slug":"微任务","link":"#微任务","children":[]},{"level":3,"title":"宏任务和微任务的异同点","slug":"宏任务和微任务的异同点","link":"#宏任务和微任务的异同点","children":[]}]},{"level":2,"title":"19-Promise：告别回调函数","slug":"_19-promise-告别回调函数","link":"#_19-promise-告别回调函数","children":[{"level":3,"title":"异步编程的问题：代码逻辑不连续","slug":"异步编程的问题-代码逻辑不连续","link":"#异步编程的问题-代码逻辑不连续","children":[]},{"level":3,"title":"Promise 的动机和核心关键点","slug":"promise-的动机和核心关键点","link":"#promise-的动机和核心关键点","children":[]},{"level":3,"title":"Promise 的基本用法","slug":"promise-的基本用法","link":"#promise-的基本用法","children":[]},{"level":3,"title":"Promise 对象的状态","slug":"promise-对象的状态","link":"#promise-对象的状态","children":[]},{"level":3,"title":"Promise 的高级应用","slug":"promise-的高级应用","link":"#promise-的高级应用","children":[]},{"level":3,"title":"Promise 的优点和缺点","slug":"promise-的优点和缺点","link":"#promise-的优点和缺点","children":[]}]},{"level":2,"title":"async-await：使用同步的方式去写异步代码","slug":"async-await-使用同步的方式去写异步代码","link":"#async-await-使用同步的方式去写异步代码","children":[]},{"level":2,"title":"21-Chrome开发者工具：利用网络面板做性能分析","slug":"_21-chrome开发者工具-利用网络面板做性能分析","link":"#_21-chrome开发者工具-利用网络面板做性能分析","children":[{"level":3,"title":"Chrome开发者工具","slug":"chrome开发者工具","link":"#chrome开发者工具","children":[]},{"level":3,"title":"网络面板","slug":"网络面板","link":"#网络面板","children":[]},{"level":3,"title":"其他面板","slug":"其他面板","link":"#其他面板","children":[]}]},{"level":2,"title":"22-DOM树：JavaScript是如何影响DOM树构建的？","slug":"_22-dom树-javascript是如何影响dom树构建的","link":"#_22-dom树-javascript是如何影响dom树构建的","children":[{"level":3,"title":"什么是DOM","slug":"什么是dom","link":"#什么是dom","children":[]},{"level":3,"title":"DOM树如何生成","slug":"dom树如何生成","link":"#dom树如何生成","children":[]},{"level":3,"title":"JavaScript对DOM树构建的影响","slug":"javascript对dom树构建的影响","link":"#javascript对dom树构建的影响","children":[]}]},{"level":2,"title":"23-渲染流水线：CSS如何影响首次加载时的白屏时间？","slug":"_23-渲染流水线-css如何影响首次加载时的白屏时间","link":"#_23-渲染流水线-css如何影响首次加载时的白屏时间","children":[{"level":3,"title":"渲染流水线视角下的CSS","slug":"渲染流水线视角下的css","link":"#渲染流水线视角下的css","children":[]},{"level":3,"title":"CSS对首次加载时的白屏时间的影响","slug":"css对首次加载时的白屏时间的影响","link":"#css对首次加载时的白屏时间的影响","children":[]},{"level":3,"title":"总结","slug":"总结-8","link":"#总结-8","children":[]}]},{"level":2,"title":"24-分层和合成机制：为什么CSS动画比JavaScript高效？","slug":"_24-分层和合成机制-为什么css动画比javascript高效","link":"#_24-分层和合成机制-为什么css动画比javascript高效","children":[{"level":3,"title":"显示器是怎么显示图像的","slug":"显示器是怎么显示图像的","link":"#显示器是怎么显示图像的","children":[]},{"level":3,"title":"帧 VS 帧率","slug":"帧-vs-帧率","link":"#帧-vs-帧率","children":[]},{"level":3,"title":"分层","slug":"分层-1","link":"#分层-1","children":[]},{"level":3,"title":"合成","slug":"合成-1","link":"#合成-1","children":[]},{"level":3,"title":"CSS动画比JavaScript高效","slug":"css动画比javascript高效","link":"#css动画比javascript高效","children":[]}]},{"level":2,"title":"25-页面性能：如何系统地优化页面？","slug":"_25-页面性能-如何系统地优化页面","link":"#_25-页面性能-如何系统地优化页面","children":[{"level":3,"title":"页面生命周期","slug":"页面生命周期","link":"#页面生命周期","children":[]},{"level":3,"title":"加载阶段优化","slug":"加载阶段优化","link":"#加载阶段优化","children":[]},{"level":3,"title":"交互阶段优化","slug":"交互阶段优化","link":"#交互阶段优化","children":[]},{"level":3,"title":"总结","slug":"总结-9","link":"#总结-9","children":[]}]},{"level":2,"title":"26-虚拟DOM：虚拟DOM和实际的DOM有何不同？","slug":"_26-虚拟dom-虚拟dom和实际的dom有何不同","link":"#_26-虚拟dom-虚拟dom和实际的dom有何不同","children":[{"level":3,"title":"DOM的缺陷","slug":"dom的缺陷","link":"#dom的缺陷","children":[]},{"level":3,"title":"虚拟DOM的解决方案","slug":"虚拟dom的解决方案","link":"#虚拟dom的解决方案","children":[]},{"level":3,"title":"双缓存和MVC","slug":"双缓存和mvc","link":"#双缓存和mvc","children":[]}]},{"level":2,"title":"27-渐进式网页应用（PWA）：它究竟解决了Web应用的哪些问题？","slug":"_27-渐进式网页应用-pwa-它究竟解决了web应用的哪些问题","link":"#_27-渐进式网页应用-pwa-它究竟解决了web应用的哪些问题","children":[{"level":3,"title":"PWA的特点包括：","slug":"pwa的特点包括","link":"#pwa的特点包括","children":[]},{"level":3,"title":"PWA的优势包括：","slug":"pwa的优势包括","link":"#pwa的优势包括","children":[]}]},{"level":2,"title":"28-WebComponent：像搭积木一样构建Web应用","slug":"_28-webcomponent-像搭积木一样构建web应用","link":"#_28-webcomponent-像搭积木一样构建web应用","children":[]},{"level":2,"title":"29-HTTP1：HTTP性能优化","slug":"_29-http1-http性能优化","link":"#_29-http1-http性能优化","children":[{"level":3,"title":"HTTP/0.9","slug":"http-0-9","link":"#http-0-9","children":[]},{"level":3,"title":"HTTP/1.0","slug":"http-1-0","link":"#http-1-0","children":[]},{"level":3,"title":"HTTP/1.1","slug":"http-1-1","link":"#http-1-1","children":[]},{"level":3,"title":"HTTP性能优化","slug":"http性能优化","link":"#http性能优化","children":[]},{"level":3,"title":"总结","slug":"总结-10","link":"#总结-10","children":[]}]},{"level":2,"title":"30-HTTP2：如何提升网络速度？","slug":"_30-http2-如何提升网络速度","link":"#_30-http2-如何提升网络速度","children":[{"level":3,"title":"HTTP/1.1的优化方式","slug":"http-1-1的优化方式","link":"#http-1-1的优化方式","children":[]},{"level":3,"title":"HTTP/1.1存在的问题","slug":"http-1-1存在的问题","link":"#http-1-1存在的问题","children":[]},{"level":3,"title":"HTTP/2的解决方案","slug":"http-2的解决方案","link":"#http-2的解决方案","children":[]}]},{"level":2,"title":"HTTP3：甩掉TCP、TLS的包袱，构建高效网络","slug":"http3-甩掉tcp、tls的包袱-构建高效网络","link":"#http3-甩掉tcp、tls的包袱-构建高效网络","children":[{"level":3,"title":"HTTP/2存在的问题","slug":"http-2存在的问题","link":"#http-2存在的问题","children":[]},{"level":3,"title":"HTTP/3的优化方式","slug":"http-3的优化方式","link":"#http-3的优化方式","children":[]}]},{"level":2,"title":"32-同源策略：为什么XMLHttpRequest不能跨域请求资源？","slug":"_32-同源策略-为什么xmlhttprequest不能跨域请求资源","link":"#_32-同源策略-为什么xmlhttprequest不能跨域请求资源","children":[{"level":3,"title":"同源策略","slug":"同源策略","link":"#同源策略","children":[]},{"level":3,"title":"XMLHttpRequest不能跨域请求资源","slug":"xmlhttprequest不能跨域请求资源","link":"#xmlhttprequest不能跨域请求资源","children":[]},{"level":3,"title":"解决跨域问题","slug":"解决跨域问题","link":"#解决跨域问题","children":[]},{"level":3,"title":"总结","slug":"总结-11","link":"#总结-11","children":[]}]},{"level":2,"title":"跨站脚本攻击（XSS）：为什么Cookie中有HttpOnly属性？'","slug":"跨站脚本攻击-xss-为什么cookie中有httponly属性","link":"#跨站脚本攻击-xss-为什么cookie中有httponly属性","children":[{"level":3,"title":"XSS攻击","slug":"xss攻击","link":"#xss攻击","children":[]},{"level":3,"title":"HttpOnly属性","slug":"httponly属性","link":"#httponly属性","children":[]},{"level":3,"title":"总结","slug":"总结-12","link":"#总结-12","children":[]}]},{"level":2,"title":"34-CSRF攻击：陌生链接不要随便点","slug":"_34-csrf攻击-陌生链接不要随便点","link":"#_34-csrf攻击-陌生链接不要随便点","children":[{"level":3,"title":"CSRF攻击","slug":"csrf攻击","link":"#csrf攻击","children":[]},{"level":3,"title":"案例分析","slug":"案例分析","link":"#案例分析","children":[]},{"level":3,"title":"防范措施","slug":"防范措施","link":"#防范措施","children":[]}]},{"level":2,"title":"35-安全沙箱：页面和系统之间的隔离墙","slug":"_35-安全沙箱-页面和系统之间的隔离墙","link":"#_35-安全沙箱-页面和系统之间的隔离墙","children":[]},{"level":2,"title":"36-HTTPS：让数据传输更安全","slug":"_36-https-让数据传输更安全","link":"#_36-https-让数据传输更安全","children":[{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":3,"title":"中间人攻击","slug":"中间人攻击","link":"#中间人攻击","children":[]},{"level":3,"title":"HTTPS","slug":"https","link":"#https","children":[]},{"level":3,"title":"SSL/TLS","slug":"ssl-tls","link":"#ssl-tls","children":[]},{"level":3,"title":"HTTPS的优点","slug":"https的优点","link":"#https的优点","children":[]},{"level":3,"title":"HTTPS的缺点","slug":"https的缺点","link":"#https的缺点","children":[]},{"level":3,"title":"总结","slug":"总结-13","link":"#总结-13","children":[]}]}],"git":{"updatedTime":1694331656000,"contributors":[{"name":"三郎过","email":"SanLangGuo@outlook.com","commits":2},{"name":"sanlangguo","email":"SanLangGuo@outlook.com","commits":1}]},"filePathRelative":"browser/list.md"}`);export{l as data};
